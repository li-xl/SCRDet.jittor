import jittor as jt 
import numpy as np 
import cv2
from utils.iou_rotate import iou_rotate

def generate_anchor_base(base_size=16, ratios=[0.5, 1, 2],
                         anchor_scales=[8, 16, 32]):
    """Generate anchor base windows by enumerating aspect ratio and scales.

    Generate anchors that are scaled and modified to the given aspect ratios.
    Area of a scaled anchor is preserved when modifying to the given aspect
    ratio.

    :obj:`R = len(ratios) * len(anchor_scales)` anchors are generated by this
    function.
    The :obj:`i * len(anchor_scales) + j` th anchor corresponds to an anchor
    generated by :obj:`ratios[i]` and :obj:`anchor_scales[j]`.

    For example, if the scale is :math:`8` and the ratio is :math:`0.25`,
    the width and the height of the base window will be stretched by :math:`8`.
    For modifying the anchor to the given aspect ratio,
    the height is halved and the width is doubled.

    Args:
        base_size (number): The width and the height of the reference window.
        ratios (list of floats): This is ratios of width to height of
            the anchors.
        anchor_scales (list of numbers): This is areas of anchors.
            Those areas will be the product of the square of an element in
            :obj:`anchor_scales` and the original area of the reference
            window.

    Returns:
        ~numpy.ndarray:
        An array of shape :math:`(R, 4)`.
        Each element is a set of coordinates of a bounding box.
        The second axis corresponds to
        :math:`(y_{min}, x_{min}, y_{max}, x_{max})` of a bounding box.

    """
    py = base_size / 2.
    px = base_size / 2.

    anchor_base = np.zeros((len(ratios) * len(anchor_scales), 4),
                           dtype=np.float32)
    for i in range(len(ratios)):
        for j in range(len(anchor_scales)):
            h = base_size * anchor_scales[j] * np.sqrt(ratios[i])
            w = base_size * anchor_scales[j] * np.sqrt(1. / ratios[i])

            index = i * len(anchor_scales) + j
            anchor_base[index, 0] = py - h / 2.
            anchor_base[index, 1] = px - w / 2.
            anchor_base[index, 2] = py + h / 2.
            anchor_base[index, 3] = px + w / 2.
    return anchor_base

def _enumerate_shifted_anchor(anchor_base, feat_stride, height, width):
    # Enumerate all shifted anchors:
    #
    # add A anchors (1, A, 4) to
    # cell K shifts (K, 1, 4) to get
    # shift anchors (K, A, 4)
    # reshape to (K*A, 4) shifted anchors
    # return (K*A, 4)

    shift_y = np.arange(0, height * feat_stride, feat_stride)
    shift_x = np.arange(0, width * feat_stride, feat_stride)
    shift_x, shift_y = np.meshgrid(shift_x, shift_y)
    shift = np.stack((shift_x.ravel(), shift_y.ravel(),
                      shift_x.ravel(), shift_y.ravel()), axis=1)

    A = anchor_base.shape[0]
    K = shift.shape[0]
    anchor = anchor_base.reshape((1, A, 4)) + \
             shift.reshape((1, K, 4)).transpose((1, 0, 2))
    anchor = anchor.reshape((K * A, 4)).astype(np.float32)
    return anchor



def loc2bbox(src_bbox,loc):
    if src_bbox.shape[0] == 0:
        return jt.zeros((0, 4), dtype=loc.dtype)

    src_width = src_bbox[:, 2:3] - src_bbox[:, 0:1]
    src_height = src_bbox[:, 3:4] - src_bbox[:, 1:2]
    src_center_x = src_bbox[:, 0:1] + 0.5 * src_width
    src_center_y = src_bbox[:, 1:2] + 0.5 * src_height

    dx = loc[:, 0:1]
    dy = loc[:, 1:2]
    dw = loc[:, 2:3]
    dh = loc[:, 3:4]

    center_x = dx*src_width+src_center_x
    center_y = dy*src_height+src_center_y
        
    w = jt.exp(dw.minimum(20.0)) * src_width
    h = jt.exp(dh.minimum(20.0)) * src_height
        
    x1,y1,x2,y2 = center_x-0.5*w, center_y-0.5*h, center_x+0.5*w, center_y+0.5*h
        
    dst_bbox = jt.contrib.concat([x1,y1,x2,y2],dim=1)

    return dst_bbox

def loc2bbox_r(src_bbox,loc):
    assert src_bbox.shape[0]==loc.shape[0] and src_bbox.shape[1]==4 and loc.shape[1]==5
    
    x_c = (src_bbox[:,2:3]+src_bbox[:,0:1])/2
    y_c = (src_bbox[:,3:4]+src_bbox[:,1:2])/2
    w = src_bbox[:,2:3]-src_bbox[:,0:1]+1
    h = src_bbox[:,3:4]-src_bbox[:,1:2]+1

    dx = loc[:, 0:1]
    dy = loc[:, 1:2]
    dw = loc[:, 2:3]
    dh = loc[:, 3:4]
    dtheta = loc[:,4:5]

    center_x = dx*w+x_c
    center_y = dy*h+y_c
        
    w = jt.exp(dw.minimum(20.0)) * w
    h = jt.exp(dh.minimum(20.0)) * h

    theta = dtheta * 180 / np.pi -90
        
    dst_bbox = jt.contrib.concat([x_c,y_c,w,h,theta],dim=1)
    return dst_bbox

    
def bbox2loc(src_bbox,dst_bbox):        
    width = src_bbox[:, 2:3] - src_bbox[:, 0:1]
    height = src_bbox[:, 3:4] - src_bbox[:, 1:2]
    center_x = src_bbox[:, 0:1] + 0.5 * width
    center_y = src_bbox[:, 1:2] + 0.5 * height

    base_width = dst_bbox[:, 2:3] - dst_bbox[:, 0:1]
    base_height = dst_bbox[:, 3:4] - dst_bbox[:, 1:2]
    base_center_x = dst_bbox[:, 0:1] + 0.5 * base_width
    base_center_y = dst_bbox[:, 1:2] + 0.5 * base_height

    eps = 1e-5
    height = jt.maximum(height, eps)
    width = jt.maximum(width, eps)

    dy = (base_center_y - center_y) / height
    dx = (base_center_x - center_x) / width

    dw = jt.log(base_width / width)
    dh = jt.log(base_height / height)
        
    loc = jt.contrib.concat([dx,dy,dw,dh],dim=1)
    return loc

def bbox2loc_r(src_bbox,dst_bbox):
    '''
    src_bbox: [x1,y1,x2,y2]
    dst_bbox: [x_c,y_c,w,h,theta]
    '''
    assert src_bbox.shape[0]==dst_bbox.shape[0] and src_bbox.shape[1]==4 and dst_bbox.shape[1]==5
    x_c = (src_bbox[:,2:3]+src_bbox[:,0:1])/2
    y_c = (src_bbox[:,3:4]+src_bbox[:,1:2])/2
    w = src_bbox[:,2:3]-src_bbox[:,0:1]+1
    h = src_bbox[:,3:4]-src_bbox[:,1:2]+1
    # theta = -90*jt.ones_like(x_c)
    dx = (dst_bbox[:,0:1]-x_c)/w
    dy = (dst_bbox[:,1:2]-y_c)/h
    
    dw = jt.log(dst_bbox[:,2:3]/w+1e-5)
    dh = jt.log(dst_bbox[:,3:4]/h+1e-5)

    dtheta = (dst_bbox[:,4:5]+90)*np.pi/180
    
    loc = jt.contrib.concat([dx,dy,dw,dh,dtheta],dim=1)
    return loc
    
def bbox_iou(bbox_a, bbox_b):
    assert bbox_a.shape[1]==4 and bbox_b.shape[1]==4

    # top left
    tl = jt.maximum(bbox_a[:, :2].unsqueeze(1), bbox_b[:, :2])
    # bottom right
    br = jt.minimum(bbox_a[:,2:].unsqueeze(1), bbox_b[:, 2:])

    area_i = jt.prod(br - tl, dim=2) * (tl < br).all(dim=2)
    area_a = jt.prod(bbox_a[:, 2:] - bbox_a[:, :2], dim=1)
    area_b = jt.prod(bbox_b[:, 2:] - bbox_b[:, :2], dim=1)
    return area_i / (area_a.unsqueeze(1) + area_b - area_i)


def rbbox_iou(bbox_a,bbox_b):
    n_a = bbox_a.shape[0]
    n_b = bbox_b.shape[0]
    bbox_a = bbox_a.unsqueeze(1)
    bbox_a = bbox_a.repeat(1,n_b,1)
    bbox_a = bbox_a.reshape(-1,5)
    
    bbox_b = bbox_b.unsqueeze(0)
    bbox_b = bbox_b.repeat(n_a,1,1)
    bbox_b = bbox_b.reshape(-1,5)

    overlaps = iou_rotate(bbox_a,bbox_b)
    overlaps = overlaps.reshape(bbox_a.shape[0],bbox_b.shape[0])

    return overlaps

def _unmap(data, count, index, fill=0):
    # Unmap a subset of item (data) back to the original set of items (of
    # size count)
    ret_shape = list(data.shape)
    ret_shape[0]=count
    ret = jt.ones(ret_shape,dtype=data.dtype)*fill
    ret[index]=data
    return ret

    
def convert_rotation_box(coordinate, with_label=True):
    """
    :param coordinate: format [x1, y1, x2, y2, x3, y3, x4, y4, (label)]
    :param with_label: default True
    :return: format [x_c, y_c, w, h, theta, (label)]
    """

    boxes = []
    if with_label:
        for rect in coordinate:
            box = np.int0(rect[:-1])
            box = box.reshape([4, 2])
            rect1 = cv2.minAreaRect(box)

            x, y, w, h, theta = rect1[0][0], rect1[0][1], rect1[1][0], rect1[1][1], rect1[2]

            if theta == 0:
                w, h = h, w
                theta -= 90

            boxes.append([x, y, w, h, theta, rect[-1]])

    else:
        for rect in coordinate:
            box = np.int0(rect)
            box = box.reshape([4, 2])
            rect1 = cv2.minAreaRect(box)

            x, y, w, h, theta = rect1[0][0], rect1[0][1], rect1[1][0], rect1[1][1], rect1[2]

            if theta == 0:
                w, h = h, w
                theta -= 90

            boxes.append([x, y, w, h, theta])
    return np.array(boxes, dtype=np.float32)

def convert_horizen_box(coordinate,with_label=True):
    """
    :param coordinate: format [x1, y1, x2, y2, x3, y3, x4, y4, (label)]
    :param with_label: default True
    :return: format [x_min, y_min, x_max, y_max, (label)]
    """
    boxes = []
    if with_label:
        boxes = np.array(coordinate,dtype=np.float32).reshape(-1,9)
        x1, y1, x2, y2, x3, y3, x4, y4, label = np.split(boxes,9,axis=1)
    else:
        boxes = np.array(coordinate,dtype=np.float32).reshape(-1,8)
        x1, y1, x2, y2, x3, y3, x4, y4 = np.split(boxes,8,axis=1)

    x_min = np.minimum(np.minimum(x1,x2),np.minimum(x3,x4))
    x_max = np.maximum(np.maximum(x1,x2),np.maximum(x3,x4))
    y_min = np.minimum(np.minimum(y1,y2),np.minimum(y3,y4))
    y_max = np.maximum(np.maximum(y1,y2),np.maximum(y3,y4))

    if with_label:
        return np.concatenate([x_min,y_min,x_max,y_max,label],axis=1)
    else:
        return np.concatenate([x_min,y_min,x_max,y_max],axis=1)


def convert_coordinate(coordinate, with_label=True):
    """
    :param coordinate: format [x_c, y_c, w, h, theta]
    :return: format [x1, y1, x2, y2, x3, y3, x4, y4]
    """
    boxes = []
    if with_label:
        for rect in coordinate:
            box = cv2.boxPoints(((rect[0], rect[1]), (rect[2], rect[3]), rect[4]))
            box = np.reshape(box, [-1, ])
            boxes.append([box[0], box[1], box[2], box[3], box[4], box[5], box[6], box[7], rect[5]])
    else:
        for rect in coordinate:
            box = cv2.boxPoints(((rect[0], rect[1]), (rect[2], rect[3]), rect[4]))
            box = np.reshape(box, [-1, ])
            boxes.append([box[0], box[1], box[2], box[3], box[4], box[5], box[6], box[7]])
    if len(boxes)==0:
        if with_label:
            return np.zeros((0,9),dtype=np.float32)
        else:
            return np.zeros((0,8),dtype=np.float32)
    return np.array(boxes, dtype=np.float32)

def bbox8_flip(bbox,img_size):
    '''
    bbox: [x1,y1,x2,y2,x3,y3,x4,y4]
    '''
    x1,y1,x2,y2,x3,y3,x4,y4 = np.split(bbox,8,axis=1)
    w,h = img_size
    x1,x2,x3,x4 = w-x1,w-x2,w-x3,w-x4
    bbox = np.concatenate([x1,y1,x2,y2,x3,y3,x4,y4],axis=1)
    return bbox

def bbox8_resize(bbox,img_size,size):
    '''
    bbox: [x1,y1,x2,y2,x3,y3,x4,y4]
    img_size: [w,h]
    '''
    rw,rh = size[0]/img_size[0],size[1]/img_size[1]
    x1,y1,x2,y2,x3,y3,x4,y4 = np.split(bbox,8,axis=1)
    x1 = x1*rw
    x2 = x2*rw
    y1 = y1*rh
    y2 = y2*rh
    x3 = x3*rw
    x4 = x4*rw
    y3 = y3*rh
    y4 = y4*rh
    bbox = np.concatenate([x1,y1,x2,y2,x3,y3,x4,y4],axis=1)
    return bbox